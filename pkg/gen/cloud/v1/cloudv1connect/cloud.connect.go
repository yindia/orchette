// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloud/v1/cloud.proto

package cloudv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "task/pkg/gen/cloud/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SchedulerName is the fully-qualified name of the Scheduler service.
	SchedulerName = "cloud.v1.Scheduler"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchedulerCreateWorkflowProcedure is the fully-qualified name of the Scheduler's CreateWorkflow
	// RPC.
	SchedulerCreateWorkflowProcedure = "/cloud.v1.Scheduler/CreateWorkflow"
	// SchedulerGetWorkflowProcedure is the fully-qualified name of the Scheduler's GetWorkflow RPC.
	SchedulerGetWorkflowProcedure = "/cloud.v1.Scheduler/GetWorkflow"
	// SchedulerUpdateWorkflowProcedure is the fully-qualified name of the Scheduler's UpdateWorkflow
	// RPC.
	SchedulerUpdateWorkflowProcedure = "/cloud.v1.Scheduler/UpdateWorkflow"
	// SchedulerDeleteWorkflowProcedure is the fully-qualified name of the Scheduler's DeleteWorkflow
	// RPC.
	SchedulerDeleteWorkflowProcedure = "/cloud.v1.Scheduler/DeleteWorkflow"
	// SchedulerListWorkflowsProcedure is the fully-qualified name of the Scheduler's ListWorkflows RPC.
	SchedulerListWorkflowsProcedure = "/cloud.v1.Scheduler/ListWorkflows"
	// SchedulerRunWorkflowProcedure is the fully-qualified name of the Scheduler's RunWorkflow RPC.
	SchedulerRunWorkflowProcedure = "/cloud.v1.Scheduler/RunWorkflow"
	// SchedulerCreateTaskProcedure is the fully-qualified name of the Scheduler's CreateTask RPC.
	SchedulerCreateTaskProcedure = "/cloud.v1.Scheduler/CreateTask"
	// SchedulerGetTaskProcedure is the fully-qualified name of the Scheduler's GetTask RPC.
	SchedulerGetTaskProcedure = "/cloud.v1.Scheduler/GetTask"
	// SchedulerUpdateTaskProcedure is the fully-qualified name of the Scheduler's UpdateTask RPC.
	SchedulerUpdateTaskProcedure = "/cloud.v1.Scheduler/UpdateTask"
	// SchedulerDeleteTaskProcedure is the fully-qualified name of the Scheduler's DeleteTask RPC.
	SchedulerDeleteTaskProcedure = "/cloud.v1.Scheduler/DeleteTask"
	// SchedulerListTasksProcedure is the fully-qualified name of the Scheduler's ListTasks RPC.
	SchedulerListTasksProcedure = "/cloud.v1.Scheduler/ListTasks"
	// SchedulerRunTaskProcedure is the fully-qualified name of the Scheduler's RunTask RPC.
	SchedulerRunTaskProcedure = "/cloud.v1.Scheduler/RunTask"
)

// SchedulerClient is a client for the cloud.v1.Scheduler service.
type SchedulerClient interface {
	// Workflow management endpoints
	CreateWorkflow(context.Context, *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.Workflow], error)
	GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.Workflow], error)
	UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.Workflow], error)
	DeleteWorkflow(context.Context, *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error)
	RunWorkflow(context.Context, *connect.Request[v1.RunWorkflowRequest]) (*connect.Response[v1.RunResponse], error)
	// Task management endpoints
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	RunTask(context.Context, *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunResponse], error)
}

// NewSchedulerClient constructs a client for the cloud.v1.Scheduler service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchedulerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SchedulerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schedulerClient{
		createWorkflow: connect.NewClient[v1.CreateWorkflowRequest, v1.Workflow](
			httpClient,
			baseURL+SchedulerCreateWorkflowProcedure,
			opts...,
		),
		getWorkflow: connect.NewClient[v1.GetWorkflowRequest, v1.Workflow](
			httpClient,
			baseURL+SchedulerGetWorkflowProcedure,
			opts...,
		),
		updateWorkflow: connect.NewClient[v1.UpdateWorkflowRequest, v1.Workflow](
			httpClient,
			baseURL+SchedulerUpdateWorkflowProcedure,
			opts...,
		),
		deleteWorkflow: connect.NewClient[v1.DeleteWorkflowRequest, v1.DeleteResponse](
			httpClient,
			baseURL+SchedulerDeleteWorkflowProcedure,
			opts...,
		),
		listWorkflows: connect.NewClient[v1.ListWorkflowsRequest, v1.ListWorkflowsResponse](
			httpClient,
			baseURL+SchedulerListWorkflowsProcedure,
			opts...,
		),
		runWorkflow: connect.NewClient[v1.RunWorkflowRequest, v1.RunResponse](
			httpClient,
			baseURL+SchedulerRunWorkflowProcedure,
			opts...,
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.Task](
			httpClient,
			baseURL+SchedulerCreateTaskProcedure,
			opts...,
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.Task](
			httpClient,
			baseURL+SchedulerGetTaskProcedure,
			opts...,
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.Task](
			httpClient,
			baseURL+SchedulerUpdateTaskProcedure,
			opts...,
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteResponse](
			httpClient,
			baseURL+SchedulerDeleteTaskProcedure,
			opts...,
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+SchedulerListTasksProcedure,
			opts...,
		),
		runTask: connect.NewClient[v1.RunTaskRequest, v1.RunResponse](
			httpClient,
			baseURL+SchedulerRunTaskProcedure,
			opts...,
		),
	}
}

// schedulerClient implements SchedulerClient.
type schedulerClient struct {
	createWorkflow *connect.Client[v1.CreateWorkflowRequest, v1.Workflow]
	getWorkflow    *connect.Client[v1.GetWorkflowRequest, v1.Workflow]
	updateWorkflow *connect.Client[v1.UpdateWorkflowRequest, v1.Workflow]
	deleteWorkflow *connect.Client[v1.DeleteWorkflowRequest, v1.DeleteResponse]
	listWorkflows  *connect.Client[v1.ListWorkflowsRequest, v1.ListWorkflowsResponse]
	runWorkflow    *connect.Client[v1.RunWorkflowRequest, v1.RunResponse]
	createTask     *connect.Client[v1.CreateTaskRequest, v1.Task]
	getTask        *connect.Client[v1.GetTaskRequest, v1.Task]
	updateTask     *connect.Client[v1.UpdateTaskRequest, v1.Task]
	deleteTask     *connect.Client[v1.DeleteTaskRequest, v1.DeleteResponse]
	listTasks      *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	runTask        *connect.Client[v1.RunTaskRequest, v1.RunResponse]
}

// CreateWorkflow calls cloud.v1.Scheduler.CreateWorkflow.
func (c *schedulerClient) CreateWorkflow(ctx context.Context, req *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.Workflow], error) {
	return c.createWorkflow.CallUnary(ctx, req)
}

// GetWorkflow calls cloud.v1.Scheduler.GetWorkflow.
func (c *schedulerClient) GetWorkflow(ctx context.Context, req *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.Workflow], error) {
	return c.getWorkflow.CallUnary(ctx, req)
}

// UpdateWorkflow calls cloud.v1.Scheduler.UpdateWorkflow.
func (c *schedulerClient) UpdateWorkflow(ctx context.Context, req *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.Workflow], error) {
	return c.updateWorkflow.CallUnary(ctx, req)
}

// DeleteWorkflow calls cloud.v1.Scheduler.DeleteWorkflow.
func (c *schedulerClient) DeleteWorkflow(ctx context.Context, req *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteWorkflow.CallUnary(ctx, req)
}

// ListWorkflows calls cloud.v1.Scheduler.ListWorkflows.
func (c *schedulerClient) ListWorkflows(ctx context.Context, req *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error) {
	return c.listWorkflows.CallUnary(ctx, req)
}

// RunWorkflow calls cloud.v1.Scheduler.RunWorkflow.
func (c *schedulerClient) RunWorkflow(ctx context.Context, req *connect.Request[v1.RunWorkflowRequest]) (*connect.Response[v1.RunResponse], error) {
	return c.runWorkflow.CallUnary(ctx, req)
}

// CreateTask calls cloud.v1.Scheduler.CreateTask.
func (c *schedulerClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls cloud.v1.Scheduler.GetTask.
func (c *schedulerClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error) {
	return c.getTask.CallUnary(ctx, req)
}

// UpdateTask calls cloud.v1.Scheduler.UpdateTask.
func (c *schedulerClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls cloud.v1.Scheduler.DeleteTask.
func (c *schedulerClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// ListTasks calls cloud.v1.Scheduler.ListTasks.
func (c *schedulerClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// RunTask calls cloud.v1.Scheduler.RunTask.
func (c *schedulerClient) RunTask(ctx context.Context, req *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunResponse], error) {
	return c.runTask.CallUnary(ctx, req)
}

// SchedulerHandler is an implementation of the cloud.v1.Scheduler service.
type SchedulerHandler interface {
	// Workflow management endpoints
	CreateWorkflow(context.Context, *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.Workflow], error)
	GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.Workflow], error)
	UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.Workflow], error)
	DeleteWorkflow(context.Context, *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error)
	RunWorkflow(context.Context, *connect.Request[v1.RunWorkflowRequest]) (*connect.Response[v1.RunResponse], error)
	// Task management endpoints
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	RunTask(context.Context, *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunResponse], error)
}

// NewSchedulerHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchedulerHandler(svc SchedulerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	schedulerCreateWorkflowHandler := connect.NewUnaryHandler(
		SchedulerCreateWorkflowProcedure,
		svc.CreateWorkflow,
		opts...,
	)
	schedulerGetWorkflowHandler := connect.NewUnaryHandler(
		SchedulerGetWorkflowProcedure,
		svc.GetWorkflow,
		opts...,
	)
	schedulerUpdateWorkflowHandler := connect.NewUnaryHandler(
		SchedulerUpdateWorkflowProcedure,
		svc.UpdateWorkflow,
		opts...,
	)
	schedulerDeleteWorkflowHandler := connect.NewUnaryHandler(
		SchedulerDeleteWorkflowProcedure,
		svc.DeleteWorkflow,
		opts...,
	)
	schedulerListWorkflowsHandler := connect.NewUnaryHandler(
		SchedulerListWorkflowsProcedure,
		svc.ListWorkflows,
		opts...,
	)
	schedulerRunWorkflowHandler := connect.NewUnaryHandler(
		SchedulerRunWorkflowProcedure,
		svc.RunWorkflow,
		opts...,
	)
	schedulerCreateTaskHandler := connect.NewUnaryHandler(
		SchedulerCreateTaskProcedure,
		svc.CreateTask,
		opts...,
	)
	schedulerGetTaskHandler := connect.NewUnaryHandler(
		SchedulerGetTaskProcedure,
		svc.GetTask,
		opts...,
	)
	schedulerUpdateTaskHandler := connect.NewUnaryHandler(
		SchedulerUpdateTaskProcedure,
		svc.UpdateTask,
		opts...,
	)
	schedulerDeleteTaskHandler := connect.NewUnaryHandler(
		SchedulerDeleteTaskProcedure,
		svc.DeleteTask,
		opts...,
	)
	schedulerListTasksHandler := connect.NewUnaryHandler(
		SchedulerListTasksProcedure,
		svc.ListTasks,
		opts...,
	)
	schedulerRunTaskHandler := connect.NewUnaryHandler(
		SchedulerRunTaskProcedure,
		svc.RunTask,
		opts...,
	)
	return "/cloud.v1.Scheduler/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchedulerCreateWorkflowProcedure:
			schedulerCreateWorkflowHandler.ServeHTTP(w, r)
		case SchedulerGetWorkflowProcedure:
			schedulerGetWorkflowHandler.ServeHTTP(w, r)
		case SchedulerUpdateWorkflowProcedure:
			schedulerUpdateWorkflowHandler.ServeHTTP(w, r)
		case SchedulerDeleteWorkflowProcedure:
			schedulerDeleteWorkflowHandler.ServeHTTP(w, r)
		case SchedulerListWorkflowsProcedure:
			schedulerListWorkflowsHandler.ServeHTTP(w, r)
		case SchedulerRunWorkflowProcedure:
			schedulerRunWorkflowHandler.ServeHTTP(w, r)
		case SchedulerCreateTaskProcedure:
			schedulerCreateTaskHandler.ServeHTTP(w, r)
		case SchedulerGetTaskProcedure:
			schedulerGetTaskHandler.ServeHTTP(w, r)
		case SchedulerUpdateTaskProcedure:
			schedulerUpdateTaskHandler.ServeHTTP(w, r)
		case SchedulerDeleteTaskProcedure:
			schedulerDeleteTaskHandler.ServeHTTP(w, r)
		case SchedulerListTasksProcedure:
			schedulerListTasksHandler.ServeHTTP(w, r)
		case SchedulerRunTaskProcedure:
			schedulerRunTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchedulerHandler returns CodeUnimplemented from all methods.
type UnimplementedSchedulerHandler struct{}

func (UnimplementedSchedulerHandler) CreateWorkflow(context.Context, *connect.Request[v1.CreateWorkflowRequest]) (*connect.Response[v1.Workflow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.CreateWorkflow is not implemented"))
}

func (UnimplementedSchedulerHandler) GetWorkflow(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.Workflow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.GetWorkflow is not implemented"))
}

func (UnimplementedSchedulerHandler) UpdateWorkflow(context.Context, *connect.Request[v1.UpdateWorkflowRequest]) (*connect.Response[v1.Workflow], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.UpdateWorkflow is not implemented"))
}

func (UnimplementedSchedulerHandler) DeleteWorkflow(context.Context, *connect.Request[v1.DeleteWorkflowRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.DeleteWorkflow is not implemented"))
}

func (UnimplementedSchedulerHandler) ListWorkflows(context.Context, *connect.Request[v1.ListWorkflowsRequest]) (*connect.Response[v1.ListWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.ListWorkflows is not implemented"))
}

func (UnimplementedSchedulerHandler) RunWorkflow(context.Context, *connect.Request[v1.RunWorkflowRequest]) (*connect.Response[v1.RunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.RunWorkflow is not implemented"))
}

func (UnimplementedSchedulerHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.CreateTask is not implemented"))
}

func (UnimplementedSchedulerHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.GetTask is not implemented"))
}

func (UnimplementedSchedulerHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.Task], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.UpdateTask is not implemented"))
}

func (UnimplementedSchedulerHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.DeleteTask is not implemented"))
}

func (UnimplementedSchedulerHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.ListTasks is not implemented"))
}

func (UnimplementedSchedulerHandler) RunTask(context.Context, *connect.Request[v1.RunTaskRequest]) (*connect.Response[v1.RunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.Scheduler.RunTask is not implemented"))
}
